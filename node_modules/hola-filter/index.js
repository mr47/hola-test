/**
 * Created by mr470 on 13.11.2015.
 */
"use strict";

var escapeRegExp = function(text) {
    // exclude * and ?
    return text.replace(/[-[\]{}()+.,\\^$|#\s]/g, "\\$&");
};
var makeRegExpString = function(text){
    return new RegExp(text.replace(/\?/g,".").replace(/\*/g,".*"));
    //var length = text.length-1;
    //for(var i=length; i == 0;i--) if (text[i] === "?") text[i] = ".";
    //text = text.split("*").join(".*");
    //return new Function("return new RegExp(text)");
};
var working = function(messages, rules){
    var rulesLength = rules.length;
    var result = {};
    var fromIn;
    var toIn;
    for (var key in messages){
        result[key] = [];
        var fromMatch = false;
        var toMatch = false;
        for (var i = 0; i<rulesLength; i++ ){
            var obj = new Object(rules[i]);

            fromIn = 'undefined' !== typeof obj['from'];
            toIn = 'undefined' !== typeof obj['to'];

            var toRegExp = toIn? makeRegExpString(obj.to.replace(/[-[\]{}()+.,\\^$|#\s]/g, "\\$&")) : "";
            var fromRegExp = fromIn? makeRegExpString(obj.from.replace(/[-[\]{}()+.,\\^$|#\s]/g, "\\$&")) : "";

            if (!fromIn && !toIn) {
                // match all
                result[key].push(obj.action);
            } else {
                fromMatch = fromIn? (messages[key].from+"").match(fromRegExp) : false;
                toMatch = toIn? (messages[key].to+"").match(toRegExp) : false;
                if (fromMatch && toMatch || fromMatch && !toIn || toMatch && !fromIn) result[key].push(obj.action);
            }
        }
    }
    return result;
};
var v1 = function(messages, rules){
    var rulesLength = rules.length;
    var result = {};
    var keys = Object.keys(messages);
    var keysLength = keys.length;
    for (var i = 0, key = keys[i]; i<keysLength; i++){
        result[key] = [];
        var fromIn = false;
        var toIn = false;
        var fromMatch = false;
        var toMatch = false;
        for (var j = 0; j<rulesLength; j++ ){
            var obj = new Object(rules[j]);
            fromIn = 'undefined' !== typeof obj['from'];
            toIn = 'undefined' !== typeof obj['to'];

            var toRegExp = toIn? makeRegExpString(escapeRegExp(obj.to)) : "";
            var fromRegExp = fromIn? makeRegExpString(escapeRegExp(obj.from)) : "";

            if (!fromIn && !toIn) {
                // match all
                result[key].push(obj.action);
            } else {
                fromMatch = fromIn? messages[key].from.match(new RegExp(fromRegExp)) : false;
                toMatch = toIn? messages[key].to.match(new RegExp(toRegExp)) : false;
                if (fromMatch && toMatch || fromMatch && !toIn || toMatch && !fromIn) result[key].push(obj.action);
            }
        }
    }
    return result;
};
module.exports = {
    working: working,
    v1: v1
};